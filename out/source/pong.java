/* autogenerated by Processing revision 1292 on 2023-05-13 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class pong extends PApplet {

Ball ball; // Definindo a 'bola' como objeto global


Paddle paddleLeft;
Paddle paddleRight;

int maxScore = 5;
int scoreEsq = 0;
int scoreDir = 0;

public void setup() {
  /* size commented out by preprocessor */;
  login();
  gameSetup();
  // TODO: Login menu
  //login();
  // TODO: Scoreboard
}

// TODO: make this damn thing work properly
public StringList login(){

  StringList players = new StringList();

  // USERNAME TEXTBOX
  // CONFIGURED USING THE GLOBAL VARS
  TEXTBOX player1 = new TEXTBOX();
  player1.X = 160;
  player1.Y = 103;
  player1.W = 200;
  player1.H = 35;

    // USERNAME TEXTBOX
  // CONFIGURED USING THE GLOBAL VARS
  TEXTBOX player2 = new TEXTBOX();
  player1.X = 160;
  player1.Y = 133;
  player1.W = 200;
  player1.H = 35;

  textboxes.add(player1);
  textboxes.add(player2);

  for (TEXTBOX t : textboxes) {
    t.DRAW();
  }
  players.append("player1");
  players.append("player2");

  print(players);

  return players;
}

public void gameSetup(){
  // Window size
  windowResize(800,480);

  // Centered ball to start the game
  ball = new Ball(width/2, height/2, 50); 

  // Horizontal ball speed
  ball.speedX = 5; 
  // Vertical ball speedx
  ball.speedY = random(-2,2); 
  
 
  paddleLeft = new Paddle(15, height/2, 30,200);
  paddleRight = new Paddle(width-15, height/2, 30,200);

  draw();
}

public void draw(){
  background(0); //clear canvas
  ball.display(); // Draw the ball to the window
  ball.move(); //calculate a new location for the ball
  ball.display(); // Draw the ball on the window
  
  paddleLeft.move();
  paddleLeft.display();
  paddleRight.move();
  paddleRight.display();

  
  if (ball.right() > width) {
    scoreEsq = scoreEsq + 1;
    ball.x = width/2;
    ball.y = height/2;
  }
  if (ball.left() < 0) {
    scoreDir = scoreDir + 1;
    ball.x = width/2;
    ball.y = height/2;
  }

  if (ball.bottom() > height) {
    ball.speedY = -ball.speedY;
  }

  if (ball.top() < 0) {
    ball.speedY = -ball.speedY;
  }
  
  if (paddleLeft.bottom() > height) {
    paddleLeft.y = height-paddleLeft.h/2;
  }

  if (paddleLeft.top() < 0) {
    paddleLeft.y = paddleLeft.h/2;
  }
    
  if (paddleRight.bottom() > height) {
    paddleRight.y = height-paddleRight.h/2;
  }

  if (paddleRight.top() < 0) {
    paddleRight.y = paddleRight.h/2;
  }
  
  if(scoreDir > maxScore || scoreEsq > maxScore) {
    exit();
  }
  // If the ball gets behind the paddle 
  // AND if the ball is int he area of the paddle (between paddle top and bottom)
  // bounce the ball to other direction

  if ( ball.left() < paddleLeft.right() && ball.y > paddleLeft.top() && ball.y < paddleLeft.bottom()){
    ball.speedX = -ball.speedX;
    ball.speedY = map(ball.y - paddleLeft.y, -paddleLeft.h/2, paddleLeft.h/2, -10, 10);
  }

  if ( ball.right() > paddleRight.left() && ball.y > paddleRight.top() && ball.y < paddleRight.bottom()) {
    ball.speedX = -ball.speedX;
    ball.speedY = map(ball.y - paddleRight.y, -paddleRight.h/2, paddleRight.h/2, -10, 10);
  }
  
  
  textSize(40);
  textAlign(CENTER);
  text(scoreDir, width/2+30, 30); // Score lado direito
  text(scoreEsq, width/2-30, 30); // Score lado esquerdo
}

public void keyPressed(){
  if(keyCode == UP){
    paddleRight.speedY=-3;
  }
  if(keyCode == DOWN){
    paddleRight.speedY=3;
  }
  if(key == 'a'){
    paddleLeft.speedY=-3;
  }
  if(key == 'z'){
    paddleLeft.speedY=3;
  }
}

public void keyReleased(){
  if(keyCode == UP){
    paddleRight.speedY=0;
  }
  if(keyCode == DOWN){
    paddleRight.speedY=0;
  }
  if(key == 'a'){
    paddleLeft.speedY=0;
  }
  if(key == 'z'){
    paddleLeft.speedY=0;
  }
}


class Ball {
  float x;
  float y;
  float speedX;
  float speedY;
  float diameter;
  int c;
  
  // Constructor method
  Ball(float tempX, float tempY, float tempDiameter) {
    x = tempX;
    y = tempY;
    diameter = tempDiameter;
    speedX = 0;
    speedY = 0;
    c = (225); 
  }
  
  public void move() {
    // Add speed to location
    y = y + speedY;
    x = x + speedX;
  }
  
  public void display() {
    fill(c); //set the drawing color
    ellipse(x,y,diameter,diameter); //draw a circle
  }
  
  //functions to help with collision detection
  public float left(){
    return x-diameter/2;
  }
  public float right(){
    return x+diameter/2;
  }
  public float top(){
    return y-diameter/2;
  }
  public float bottom(){
    return y+diameter/2;
  }

}

class Paddle{

  float x;
  float y;
  float w;
  float h;
  float speedY;
  float speedX;
  int c;
  
  Paddle(float tempX, float tempY, float tempW, float tempH){
    x = tempX;
    y = tempY;
    w = tempW;
    h = tempH;
    speedY = 0;
    speedX = 0;
    c=(255);
  }

  public void move(){
    y += speedY;
    x += speedX;
  }

  public void display(){
    fill(c);
    rect(x-w/2,y-h/2,w,h);
  } 
  
  //helper functions
  public float left(){
    return x-w/2;
  }
  public float right(){
    return x+w/2;
  }
  public float top(){
    return y-h/2;
  }
  public float bottom(){
    return y+h/2;
  }
}
ArrayList<TEXTBOX> textboxes = new ArrayList<TEXTBOX>();
boolean logged = false; // DEMO

public void LoginInit() {
   size(400, 250);
   
   // USERNAME TEXTBOX
   // CONFIGURED USING THE GLOBAL VARS
   TEXTBOX userTB = new TEXTBOX();
   userTB.X = 160;
   userTB.Y = 103;
   userTB.W = 200;
   userTB.H = 35;
   
   // PASSWORD TEXTBOX
   // CONFIGURED USING THE CLASS CONSTRACTOR
   TEXTBOX passTB = new TEXTBOX(160, 153, 200, 35);
   passTB.BorderWeight = 3;
   passTB.BorderEnable = true;
   
   textboxes.add(userTB);
   textboxes.add(passTB);
}

public void drawLogin() {
   background(40, 160, 40);
   
   // LABELS
   fill(250, 250, 250);
   text("LOGIN FORM", (width - textWidth("LOGIN FORM")) / 2, 60);
   textSize(15);
   text("Press Enter to Login", (width - textWidth("Press Enter to Login")) / 2, 80);
   textSize(24);
   text("Username: ", 20, 130);
   text("Password: ", 20, 180);
   
   // DRAW THE TEXTBOXES
   for (TEXTBOX t : textboxes) {
      t.DRAW();
   }
   
   // JUST FOR DEMO (DO NOT EVER DO THAT!)
   if (logged) {
      fill(250, 250, 250);
      text("YOU ARE LOGGED IN!", (width - textWidth("YOU ARE LOGGED IN")) / 2, 230);
   }
}

public void mousePressed() {
   for (TEXTBOX t : textboxes) {
      t.PRESSED(mouseX, mouseY);
   }
}

// JUST FOR DEMO
public void Submit() {
   if (textboxes.get(0).Text.equals("mitkonikov")) {
      if (textboxes.get(1).Text.equals("test1234")) {
         logged = true;
      } else {
         logged = false;
      }
   } else {
      logged = false;
   }
}

public void keyPressedL() {
   for (TEXTBOX t : textboxes) {
      if (t.KEYPRESSED(key, (int)keyCode)) {
         Submit();
      }
   }
}
public class TEXTBOX {

   public int X = 0, Y = 0, H = 35, W = 200;
   public int TEXTSIZE = 24;
   
   // COLORS
   public int Background = color(140, 140, 140);
   public int Foreground = color(0, 0, 0);
   public int BackgroundSelected = color(160, 160, 160);
   public int Border = color(30, 30, 30);
   
   public boolean BorderEnable = false;
   public int BorderWeight = 1;
   
   public String Text = "";
   public int TextLength = 0;

   private boolean selected = false;
   
   TEXTBOX() {
      // CREATE OBJECT DEFAULT TEXTBOX
   }
   
   TEXTBOX(int x, int y, int w, int h) {
      X = x; Y = y; W = w; H = h;
   }
   
   public void DRAW() {
      // DRAWING THE BACKGROUND
      if (selected) {
         fill(BackgroundSelected);
      } else {
         fill(Background);
      }
      
      if (BorderEnable) {
         strokeWeight(BorderWeight);
         stroke(Border);
      } else {
         noStroke();
      }
      
      rect(X, Y, W, H);
      
      // DRAWING THE TEXT ITSELF
      fill(Foreground);
      textSize(TEXTSIZE);
      text(Text, X + (textWidth("a") / 2), Y + TEXTSIZE);
   }
   
   // IF THE KEYCODE IS ENTER RETURN 1
   // ELSE RETURN 0
   public boolean KEYPRESSED(char KEY, int KEYCODE) {
      if (selected) {
         if (KEYCODE == (int)BACKSPACE) {
            BACKSPACE();
         } else if (KEYCODE == 32) {
            // SPACE
            addText(' ');
         } else if (KEYCODE == (int)ENTER) {
            return true;
         } else {
            // CHECK IF THE KEY IS A LETTER OR A NUMBER
            boolean isKeyCapitalLetter = (KEY >= 'A' && KEY <= 'Z');
            boolean isKeySmallLetter = (KEY >= 'a' && KEY <= 'z');
            boolean isKeyNumber = (KEY >= '0' && KEY <= '9');
      
            if (isKeyCapitalLetter || isKeySmallLetter || isKeyNumber) {
               addText(KEY);
            }
         }
      }
      
      return false;
   }
   
   private void addText(char text) {
      // IF THE TEXT WIDHT IS IN BOUNDARIES OF THE TEXTBOX
      if (textWidth(Text + text) < W) {
         Text += text;
         TextLength++;
      }
   }
   
   private void BACKSPACE() {
      if (TextLength - 1 >= 0) {
         Text = Text.substring(0, TextLength - 1);
         TextLength--;
      }
   }
   
   // FUNCTION FOR TESTING IS THE POINT
   // OVER THE TEXTBOX
   private boolean overBox(int x, int y) {
      if (x >= X && x <= X + W) {
         if (y >= Y && y <= Y + H) {
            return true;
         }
      }
      
      return false;
   }
   
   public void PRESSED(int x, int y) {
      if (overBox(x, y)) {
         selected = true;
      } else {
         selected = false;
      }
   }
}


  public void settings() { size(400, 250); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "pong" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
